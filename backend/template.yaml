---
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  peco-backend
Transform:
  - AWS::Serverless-2016-10-31

Resources:
  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Gamma
      OpenApiVersion: 3.0.3
      ApiKeySourceType: HEADER
      Auth:
        AddApiKeyRequiredToCorsPreflight: true
        AddDefaultAuthorizerToCorsPreflight: true
        Authorizers:
          RestApiAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
        DefaultAuthorizer: RestApiAuthorizer
        UsagePlan:
          CreateUsagePlan: PER_API
          UsagePlanName: Default usage plan
          Description: Default usage plan with limited quota
          Quota:
            Limit: 1000
            Period: MONTH
          Throttle:
            BurstLimit: 10
            RateLimit: 1

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: peco-cognito-user-pool
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        UnusedAccountValidityDays: 365
      AutoVerifiedAttributes:
        - email
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      # Schema:
      #   - AttributeDataType: String
      #     Name: apiKey
      #     Mutable: true
      # LambdaConfig:
      #   PostConfirmation: !GetAtt CognitoAutomaticOrgIdAssignmentFunction.Arn
      UsernameAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
  SampleUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_USER_PASSWORD_AUTH

  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  CreateUseCaseFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/use-case-crud.handle_get_request
      Runtime: nodejs20.x
      Architectures:
        - arm64
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref SampleTable
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref SampleTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /use-cases/
            Method: GET
            RestApiId: !Ref RestApi
            Auth:
              Authorizer: RestApiAuthorizer
              ApiKeyRequired: true
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        External:
          - 'uuid'
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - src/handlers/use-case-crud.mts

  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  SampleTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name: Peco
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName: !Ref ApplicationResourceGroup
      AutoConfigurationEnabled: true

Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/use-cases/"
  ApiKey:
    Description: "You can find your API Key in the AWS console: (Put in the request HEADER as 'x-api-key')"
    Value: !Sub "https://console.aws.amazon.com/apigateway/home?region=${AWS::Region}#/api-keys/${RestApiApiKey}"
